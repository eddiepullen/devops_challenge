---
- hosts: microservice_server
  vars:
    created_username: ubuntu
    inventory_hostname: 10.0.2.15
    ansible_port: 22
    configured_port: 1337
  tasks:
    - name: Set configured port fact
      set_fact:
        configured_port: "{{ ansible_port }}"

    - name: Check if we're using the default SSH port
      wait_for:
        port: "22"
        state: "started"
        host: "{{ inventory_hostname }}"
        connect_timeout: "5"
        timeout: "10"
      delegate_to: "localhost"
      ignore_errors: "yes"
      register: default_ssh

    - name: Set inventory ansible_port to default
      set_fact:
        ansible_port: "22"
      when: default_ssh is defined and
            default_ssh.state == "started"
      register: ssh_port_set

    - name: SSH port is configured properly
      debug:
        msg: "SSH port is configured properly"
      when: configured_ssh is defined and
            configured_ssh.state is defined and
            configured_ssh.state == "started"
      register: ssh_port_set

    - name: Fail if SSH port was not auto-detected (unknown)
      fail:
        msg: "The SSH port is neither 22 or {{ ansible_port }}."
      when: ssh_port_set is undefined
      
    - name: Check if we're using the inventory-provided SSH port
      wait_for:
        port: "{{ ansible_port }}"
        state: "started"
        host: "{{ inventory_hostname }}"
        connect_timeout: "5"
        timeout: "10"
      delegate_to: "localhost"
      ignore_errors: "yes"
      register: configured_ssh
      when: default_ssh is defined and
            default_ssh.state is undefined

    - name: Confirm host connection works
      ping:

    - name: Setup alternate SSH port
      lineinfile:
        dest: "/etc/ssh/sshd_config"
        regexp: "^Port"
        line: "Port {{ configured_port }}"
      become: true
      become_method: sudo

    - name: Ensure we use the configured SSH port for the remainder of the role
      set_fact:
        ansible_port: "{{ configured_port }}"

    - name: Allow user to run sudo commands without password
      lineinfile:
        path: /etc/sudoers
        state: present
        line: 'ubuntu ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
      become: true

    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin prohibit-password'
      become: true
      become_method: sudo

    - name: Allow all access to SSH
      ufw:
        rule: allow
        port: '22'
        proto: tcp
      become: true
      become_method: sudo

    - name: Allow all access to SSH
      ufw:
        rule: allow
        port: '1337'
        proto: tcp
      become: true
      become_method: sudo

    - name: Allow access to frontned
      ufw:
        rule: allow
        port: '8081'
        proto: tcp
      become: true
      become_method: sudo

    - name: Allow all access to backend
      ufw:
        rule: allow
        port: '8080'
        proto: tcp
      become: true
      become_method: sudo

    - name: Allow all access to HTTPS
      ufw:
        rule: allow
        port: '443'
        proto: tcp
      become: true
      become_method: sudo

    - name: UFW - Enable and deny by default
      ufw:
        state: enabled
        default: deny
      become: true
      become_method: sudo

    - name: Update apt packages
      apt:
        update_cache: yes
      become: true
      become_method: sudo

    - name: Make directory for Docker official GPG key
      file:
        path: /etc/apt/keyrings
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: true

    - name: Add Docker official GPG key
      shell: 
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --batch --yes --dearmor -o /etc/apt/keyrings/docker.gpg
      become: true
      become_method: sudo

    - name: Set up the repository
      shell: 
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      become: true
      become_method: sudo

    - name: Specify Installation Source
      shell: 
        apt-cache policy docker-ce
      become: true
      become_method: sudo

    - name: Install Docker
      apt:
        pkg:
          - docker-ce 
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
          - unzip
          - awscli
        state: latest
        update_cache: true
      become: true
      become_method: sudo

    - name: Change docker.sock file permissions
      file:
        path: /var/run/docker.sock
        owner: root
        group: root
        mode: '0666'
      become: true
      become_method: sudo

    - name: Authenticate against AWS ECR
      shell: 
        aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 992122884453.dkr.ecr.eu-central-1.amazonaws.com

    - name: Stop running frontned container
      shell: 
        docker ps -q --filter ancestor="992122884453.dkr.ecr.eu-central-1.amazonaws.com/validator-frontend" | xargs -r docker stop

    - name: Stop running backend container
      shell: 
        docker ps -q --filter ancestor="992122884453.dkr.ecr.eu-central-1.amazonaws.com/validator-backend" | xargs -r docker stop

    - name: Remove docker images
      shell: 
        docker system prune -af

    - name: Pull frontend image
      shell: 
        docker pull 992122884453.dkr.ecr.eu-central-1.amazonaws.com/validator-frontend:latest

    - name: Pull backend image
      shell: 
        docker pull 992122884453.dkr.ecr.eu-central-1.amazonaws.com/validator-backend:latest

    - name: Run backend container
      shell: 
        docker run -d  --publish 8080:8080 992122884453.dkr.ecr.eu-central-1.amazonaws.com/validator-backend:latest

    - name: Run frontend container
      shell: 
        docker run -d --publish 8081:80 992122884453.dkr.ecr.eu-central-1.amazonaws.com/validator-frontend:latest

    - name: Restart sshd
      service:
        name: sshd
        state: restarted